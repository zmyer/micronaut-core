buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
    }
}

import groovyx.net.http.RESTClient
import static groovyx.net.http.ContentType.*

def bintrayUser = System.getenv("BINTRAY_USER") ?: project.hasProperty("bintrayUser") ? project.bintrayUser : ''
def bintrayKey = System.getenv("BINTRAY_KEY") ?: project.hasProperty("bintrayKey") ? project.bintrayKey : ''
def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
def packageName = project.bintrayPackage

task synchronizeWithMavenCentral() {
    description = "Syncs with Maven Central/Sonatype"
    doLast {
        boolean ongoing = true

        println """
Synchronizing with Maven central. This may take a few minutes ...
If this fails, log on to http://oss.sonatype.org/ using the centralUser credentials
and progress through process manually -> Close -> Publish ... under staging repositories
"""
        // this hack is here to keep Travis from thinking this is
        // a stalled build
        Thread.start {
            while(ongoing) {
                sleep 5000
                println "Still Publishing. Please wait..."
            }
        }
        try {
            try {
                def mavenClent = new RESTClient("https://repo.maven.apache.org/maven2/")
                mavenClent.get(path:"${projectGroupId.replace('.', '/')}/${packageName}/$projectVersion/${packageName}-${projectVersion}.jar")
            } catch(groovyx.net.http.HttpResponseException e) {
                // doesn't exist.. try sync
                def client = new RESTClient('https://api.bintray.com/maven_central_sync/micronaut/core-releases-local/')
                client.headers['Authorization'] = 'Basic ' + "$bintrayUser:$bintrayKey".getBytes('iso-8859-1').encodeBase64()
                def body = /{}/
                def resp = client.post(
                        path: "$packageName/versions/$projectVersion",
                        body: body,
                        requestContentType: JSON
                )
                assert resp.status == 200
                println resp.data.status
                println resp.data.messages.join('\n')
            }
        } catch (groovyx.net.http.HttpResponseException e) {
            println "Error: $e"
            println "Message: $e.message"
            println "Body: $e.response.data"
            throw e
        } finally {
            ongoing = false
        }
    }
}